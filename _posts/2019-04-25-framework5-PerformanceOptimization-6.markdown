---
layout: post
title:  一篇搞定mysql
date:   2019-04-25 21:52:12 +08:00
category: 性能优化
tags: mysql
comments: true
---

* content
{:toc}


mysql是大量使用的免费小型数据库，搞懂其相关概念、优化方法有助于开发。























## 概念

### 事务

这是个通用概念，体现在mysql中：

```
show variables like 'AUTOCOMMIT';//查看状态

set autocommit = 0; //设置不自动开启

设置了不自动开启使用以下命令方便测试：

BEGIN 开始一个事务

ROLLBACK 事务回滚

COMMIT 事务确认

```

也有ACID原则：

A: atomicity,原子性，一个工作单元要么全做成功，要么全部失败回滚，不允许只执行一部分操作。

C:consistency,一致性，数据库的数据从一个一致性转换到另一个一致性。理解：该事务不存在中间态，在事务前后是两种状态。用于保证数据库的完整性。

I:isolation,隔离型，一个事务所做的修改在提交之前对其他事务不可见。

D:durability,持久性，一旦事务提交，被保存到数据库就会持久化，不可能断电，系统崩溃导致数据丢失。

事务性是基础，所有安全性问题都围绕它展开。

#### 事务的隔离级别

查看隔离级别

```

SELECT @@tx_isolation

```

由于业务对数据的容忍度和性能的差别，mysql分为4个隔离级别，可供自主选择：

Read uncommitted：未提交读，可以读到事务未提交的数据，任何情况都可以发生。级别最低，性能最好，安全性最差。

Read committed:提交读，一个事务要等到另一个事务提交后才能读，可以避免脏读。

Repeatable read:可重复读，就是事务开始时不允许修改操作。可以避免脏读，不可重复读的问题。mysql默认的隔离级别。（innodb解决了此情况下的幻读问题）

Serializable:串行化，可以避免脏读、幻读、不可重复读问题。性能最差，安全性最高。

#### 脏读、不可重复读、幻读

脏读：事务a读取了事务b更新的数据，但是b回滚了，a得到的数据时脏的。

不可重复读：事务a读取了一次，b对数据进行了更新，a再读一次数据，结果不一致问题；

幻读：事务a读取了一次，b对数据进行了插入操作，由于主键不可重复，a进行插入的时候，报错发现主键重复。幻读侧重的方面是某一次的 select 操作得到的结果所表征的数据状态无法支撑后续的业务操作。具体一些：select 某记录是否存在，不存在，准备插入此记录，但执行 insert 时发现此记录已存在，无法插入，此时就发生了幻读。不可重复读侧重表达 读-读，幻读则是说 读-写，用写来证实读的是鬼影。

```

SELECT `id` FROM `users` WHERE `id` = 1 FOR UPDATE;可以解决幻读的问题

FOR UPDATE 也会对此 “记录” 加锁，InnoDB 的行锁（gap锁是范围行锁）锁定的是记录所对应的索引

```

### mysq的存储引擎

myisam:使用数据（MYD）和索引（MYI）分开存储、表级锁、不支持事务

innodb:事务、行级锁

Archive：不支持事务、占用的磁盘少，只支持select和insert

CSV:数据快速导出导入，表格直接转换成csv

#### innodb的四大特性

插入缓存、两次写、自定义哈希索引、预读；
