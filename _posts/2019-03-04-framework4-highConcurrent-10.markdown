---
layout: post
title:  分布式协调之zookeeper学习二
date:   2019-03-04 22:52:12 +08:00
category: 高并发分布式
tags: zookeeper
comments: true
---

* content
{:toc}

安装好zk后，就是简单的crud简单操作，这里不介绍这部分，这里将要介绍zk的基本原理。












## zk的由来

  分布式系统的很多难题（服务发现、服务监听、服务的调用、负载等），都是由于缺少协调机制造成的。  

  在分布式协调这块做得比较好的，有 Google 的 Chubby 以及 Apache 的 Zookeeper。

  Google Chubby 是一个分布式锁服务，通过 GoogleChubby 来解决分布式协作、 Master 选举等与分布式锁服务相关的问题。

  Zookeeper 也是类似，因为当时在雅虎内部的很多系统都需要依赖一个系统来进行分布式协调，但是谷歌的Chubby是不开源的，所以后来雅虎基于 Chubby 的思想开发了zookeeper，并捐赠给了 Apache。在上面这个架构下 zookeeper 以后，可以用来解决 task 执行问题，各个服务先去 zookeeper 上去注册节点，然后获得权限以后再来访问 task

  - zk的设计猜想

  zookeeper 主要是解决分布式环境下的服务协调问题而产生的，如果我们要去实现一个 zookeeper 这样的中间件，我们需要做什么？

  1 防止单点故障

  如果要防止 zookeeper 这个中间件的单点故障，那就势必要做集群。而且这个集群如果要满足高性能要求的话，还得是一个高性能高可用的集群。高性能意味着这个集群能够分担客户端的请求流量，高可用意味着集群中的某一个节点宕机以后，不影响整个集群的数据和继续提供服务的可能性。

  结论： 所以这个中间件需要考虑到集群,而且这个集群还需要分摊客户端的请求流量

  2 接着上面那个结论再来思考，如果要满足这样的一个高性能集群

  我们最直观的想法应该是，每个节点都能接收到请求，并且每个节点的数据都必须要保持一致。要实现各个节点的数据一致性，就势必要一个 leader 节点责协调和数据同步操作。这个我想大家都知道，如果在这样一个集群中没有 leader 节点，每个节点都可以接收所有请求，那么这个集群的数据同步的复杂度是非常大。

  结论：所以这个集群中涉及到数据同步以及会存在leader 节点
